{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":269359,"sourceType":"datasetVersion","datasetId":111880}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mohammedahmed13/intel-image-classification-cnn?scriptVersionId=198052020\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nimport cv2\nimport tensorflow as tf\nfrom tqdm import tqdm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-24T16:24:29.116594Z","iopub.execute_input":"2024-09-24T16:24:29.117588Z","iopub.status.idle":"2024-09-24T16:24:29.123987Z","shell.execute_reply.started":"2024-09-24T16:24:29.11752Z","shell.execute_reply":"2024-09-24T16:24:29.122716Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_names = [\"mountain\", \"street\", \"glacier\", \"buildings\", \"sea\", \"forest\"]\nclass_names_label = {class_name: i for i, class_name in enumerate(class_names)}\nnb_classes = len(class_names)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:24:29.126166Z","iopub.execute_input":"2024-09-24T16:24:29.126564Z","iopub.status.idle":"2024-09-24T16:24:29.139605Z","shell.execute_reply.started":"2024-09-24T16:24:29.126524Z","shell.execute_reply":"2024-09-24T16:24:29.138239Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def load_data():\n    datasets = [\"/kaggle/input/intel-image-classification/seg_train/seg_train\", \"/kaggle/input/intel-image-classification/seg_test/seg_test\"]\n    output = []\n    \n    # Iterate through training and test sets\n    for dataset in datasets:\n        \n        images = []\n        labels = []\n        \n        print(f\"Loading {dataset}\")\n        \n        # Iterate through each folder\n        for folder in os.listdir(dataset):\n            label = class_names_label[folder]\n\n            # Iterate through each image in folder\n            for file in tqdm(os.listdir(os.path.join(dataset, folder))):\n                img = cv2.imread(os.path.join(os.path.join(dataset, folder), file))   \n                \n                # Append the image and its corresponding label to the output\n                images.append(img)\n                labels.append(label)\n                \n        labels = np.array(labels, dtype = \"int32\")    \n        \n        output.append((images, labels))\n        \n    return output","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:24:29.142577Z","iopub.execute_input":"2024-09-24T16:24:29.142978Z","iopub.status.idle":"2024-09-24T16:24:29.152699Z","shell.execute_reply.started":"2024-09-24T16:24:29.142939Z","shell.execute_reply":"2024-09-24T16:24:29.151592Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def load_pred_data():\n    dataset = \"/kaggle/input/intel-image-classification/seg_pred/seg_pred\"\n    images = []\n    \n    print(f\"Loading {dataset}\")\n    \n    # Iterate through each folder\n    for img in tqdm(os.listdir(dataset)):\n        img = cv2.imread(os.path.join(dataset, img))   \n        # Append the image\n        images.append(img)\n\n    return images","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:24:29.154813Z","iopub.execute_input":"2024-09-24T16:24:29.155243Z","iopub.status.idle":"2024-09-24T16:24:29.16719Z","shell.execute_reply.started":"2024-09-24T16:24:29.155204Z","shell.execute_reply":"2024-09-24T16:24:29.165856Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"(train_images, train_labels), (test_images, test_labels)= load_data()\npred_images = load_pred_data()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:24:29.168504Z","iopub.execute_input":"2024-09-24T16:24:29.168929Z","iopub.status.idle":"2024-09-24T16:25:28.267363Z","shell.execute_reply.started":"2024-09-24T16:24:29.168888Z","shell.execute_reply":"2024-09-24T16:25:28.266346Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def display_random_images(n_imgs, color = \"color\", resize = \"No\", img_size = None):\n    if n_imgs <= 5:\n        fig, ax = plt.subplots(1, n_imgs, figsize = (16, 4))\n    else:\n        n_rows = n_imgs // 4 + 1\n        fig, ax = plt.subplots(n_rows, 4, figsize = (20, 20))\n    ax = ax.ravel()   \n    \n    image_shape = set()\n    for i in range(n_imgs):\n        random_idx = np.random.randint(len(train_images))\n        img = train_images[random_idx]\n\n        if resize == \"Yes\":\n            if img_size is None:\n                print(\"Error: image size is None\")\n                return\n            img = cv2.resize(img, img_size)\n            \n        if color != \"color\":\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            ax[i].imshow(img, cmap = \"gray\")\n        else:\n            ax[i].imshow(img)\n        image_shape.add(img.shape)\n    print(image_shape)           \n    plt.show()\n        ","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:28.268629Z","iopub.execute_input":"2024-09-24T16:25:28.269008Z","iopub.status.idle":"2024-09-24T16:25:28.280007Z","shell.execute_reply.started":"2024-09-24T16:25:28.26897Z","shell.execute_reply":"2024-09-24T16:25:28.278886Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display_random_images(5)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:28.283123Z","iopub.execute_input":"2024-09-24T16:25:28.283542Z","iopub.status.idle":"2024-09-24T16:25:29.16118Z","shell.execute_reply.started":"2024-09-24T16:25:28.283503Z","shell.execute_reply":"2024-09-24T16:25:29.160039Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display_random_images(3, color = \"gray\")","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:29.162535Z","iopub.execute_input":"2024-09-24T16:25:29.162926Z","iopub.status.idle":"2024-09-24T16:25:29.832008Z","shell.execute_reply.started":"2024-09-24T16:25:29.162881Z","shell.execute_reply":"2024-09-24T16:25:29.830891Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Choose minimum image size\nimg_size = (120, 100)\ndisplay_random_images(5, color = \"gray\", resize = \"Yes\", img_size = img_size)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:29.833348Z","iopub.execute_input":"2024-09-24T16:25:29.833716Z","iopub.status.idle":"2024-09-24T16:25:30.642674Z","shell.execute_reply.started":"2024-09-24T16:25:29.833678Z","shell.execute_reply":"2024-09-24T16:25:30.641403Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"All_images = {}\n\n# Create a dictionary mapping variable names to actual image arrays\nimage_dict = {\n    \"train_images\": train_images,\n    \"test_images\": test_images,\n    \"pred_images\": pred_images\n}\n\n# Loop through the dictionary\nfor name, images in image_dict.items():\n    temp_images = []\n    \n    for img in images:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        img = cv2.resize(img, img_size)\n        img = img.reshape(img_size[1], img_size[0], 1)  # reshape to suit the CNN\n\n        temp_images.append(img)\n        \n    temp_images = np.array(temp_images, dtype=\"float32\")\n    \n    # Use 'name' as the key in All_images\n    All_images[name] = temp_images\n\n# Now you can check the length of the All_images dictionary\nlen(All_images)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:30.644331Z","iopub.execute_input":"2024-09-24T16:25:30.64481Z","iopub.status.idle":"2024-09-24T16:25:32.145131Z","shell.execute_reply.started":"2024-09-24T16:25:30.64475Z","shell.execute_reply":"2024-09-24T16:25:32.144066Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"shape = set()\nfor img in All_images[\"train_images\"]:\n    shape.add(img.shape)\nshape","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.146276Z","iopub.execute_input":"2024-09-24T16:25:32.146633Z","iopub.status.idle":"2024-09-24T16:25:32.162311Z","shell.execute_reply.started":"2024-09-24T16:25:32.146589Z","shell.execute_reply":"2024-09-24T16:25:32.161239Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"All_images[\"train_images\"], train_labels = shuffle(All_images[\"train_images\"], train_labels, random_state = 42)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.163566Z","iopub.execute_input":"2024-09-24T16:25:32.163964Z","iopub.status.idle":"2024-09-24T16:25:32.382014Z","shell.execute_reply.started":"2024-09-24T16:25:32.163925Z","shell.execute_reply":"2024-09-24T16:25:32.380894Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"n_train = train_labels.shape[0]\nn_test = test_labels.shape[0]\n\nprint(f\"Number of training examples: {n_train}\")\nprint(f\"Number of testing examples: {n_test}\")\nprint(f\"Each image is of size: {shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.383478Z","iopub.execute_input":"2024-09-24T16:25:32.38393Z","iopub.status.idle":"2024-09-24T16:25:32.39104Z","shell.execute_reply.started":"2024-09-24T16:25:32.383872Z","shell.execute_reply":"2024-09-24T16:25:32.389784Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, kernel_size = (3, 3), activation = \"relu\", input_shape = (img_size[0], img_size[1], 1)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(32, kernel_size = (3, 3), activation = \"relu\"),\n    tf.keras.layers.MaxPooling2D(pool_size = (5, 5), strides = (3, 3)),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Conv2D(32, kernel_size = (3, 3), activation = \"relu\"),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(16, kernel_size = (3, 3), activation = \"relu\"),\n    tf.keras.layers.MaxPooling2D(pool_size = (3, 3), strides = (3, 3)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(1024, activation = \"relu\"),\n    tf.keras.layers.Dense(256, activation = \"relu\"),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(32, activation = \"relu\"),\n    tf.keras.layers.Dense(6, activation = \"softmax\")])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.392663Z","iopub.execute_input":"2024-09-24T16:25:32.393371Z","iopub.status.idle":"2024-09-24T16:25:32.517756Z","shell.execute_reply.started":"2024-09-24T16:25:32.393325Z","shell.execute_reply":"2024-09-24T16:25:32.516507Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.compile(optimizer = 'adam', loss = \"sparse_categorical_crossentropy\", metrics = [\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.519449Z","iopub.execute_input":"2024-09-24T16:25:32.520389Z","iopub.status.idle":"2024-09-24T16:25:32.531112Z","shell.execute_reply.started":"2024-09-24T16:25:32.520332Z","shell.execute_reply":"2024-09-24T16:25:32.529991Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:25:32.535397Z","iopub.execute_input":"2024-09-24T16:25:32.53578Z","iopub.status.idle":"2024-09-24T16:25:32.572843Z","shell.execute_reply.started":"2024-09-24T16:25:32.535741Z","shell.execute_reply":"2024-09-24T16:25:32.571802Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history = model.fit(All_images[\"train_images\"], train_labels,\n                         validation_split = 0.25,\n                         epochs=100,\n                         batch_size= 650,\n                         verbose= 1,\n                         callbacks=[tf.keras.callbacks.EarlyStopping(\n                                            patience=10,\n                                            monitor='val_accuracy',#\"val_loss\",\n                                            restore_best_weights= True)])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:32:12.105129Z","iopub.execute_input":"2024-09-24T16:32:12.10602Z","iopub.status.idle":"2024-09-24T16:34:06.778318Z","shell.execute_reply.started":"2024-09-24T16:32:12.105975Z","shell.execute_reply":"2024-09-24T16:34:06.777251Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_accuracy_loss(history):\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'], label = \"train\")\n    plt.plot(history.history['val_accuracy'], label = \"validataion\")\n    plt.title(\"model accuracy\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend(loc = 'upper left')\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'], label = \"loss\")\n    plt.plot(history.history['val_loss'], label = \"val_loss\")\n    plt.title(\"model loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n    plt.legend(loc = 'upper left')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:06.7811Z","iopub.execute_input":"2024-09-24T16:34:06.781957Z","iopub.status.idle":"2024-09-24T16:34:06.79154Z","shell.execute_reply.started":"2024-09-24T16:34:06.7819Z","shell.execute_reply":"2024-09-24T16:34:06.790468Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_accuracy_loss(history)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:26.277524Z","iopub.execute_input":"2024-09-24T16:34:26.277975Z","iopub.status.idle":"2024-09-24T16:34:26.820009Z","shell.execute_reply.started":"2024-09-24T16:34:26.277936Z","shell.execute_reply":"2024-09-24T16:34:26.818896Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.evaluate(All_images[\"test_images\"], test_labels)[1]","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:26.822312Z","iopub.execute_input":"2024-09-24T16:34:26.823064Z","iopub.status.idle":"2024-09-24T16:34:27.586694Z","shell.execute_reply.started":"2024-09-24T16:34:26.823012Z","shell.execute_reply":"2024-09-24T16:34:27.585558Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred_labels = model.predict(All_images[\"test_images\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:27.588641Z","iopub.execute_input":"2024-09-24T16:34:27.589039Z","iopub.status.idle":"2024-09-24T16:34:28.240753Z","shell.execute_reply.started":"2024-09-24T16:34:27.588999Z","shell.execute_reply":"2024-09-24T16:34:28.239595Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred_labels = np.argmax(pred_labels, axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:28.2427Z","iopub.execute_input":"2024-09-24T16:34:28.243418Z","iopub.status.idle":"2024-09-24T16:34:28.248041Z","shell.execute_reply.started":"2024-09-24T16:34:28.243379Z","shell.execute_reply":"2024-09-24T16:34:28.246852Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cm = confusion_matrix(test_labels, pred_labels)\ndisp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = class_names)\ndisp.plot()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:28.460833Z","iopub.execute_input":"2024-09-24T16:34:28.461728Z","iopub.status.idle":"2024-09-24T16:34:28.908964Z","shell.execute_reply.started":"2024-09-24T16:34:28.461682Z","shell.execute_reply":"2024-09-24T16:34:28.907879Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred_labels = model.predict(All_images[\"pred_images\"])\npred_labels = np.argmax(pred_labels, axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:30.71317Z","iopub.execute_input":"2024-09-24T16:34:30.713698Z","iopub.status.idle":"2024-09-24T16:34:32.243948Z","shell.execute_reply.started":"2024-09-24T16:34:30.713656Z","shell.execute_reply":"2024-09-24T16:34:32.242917Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(20,20))\n\nfor n , i in enumerate(list(np.random.randint(0, len(All_images[\"pred_images\"]),36))) :\n    plt.subplot(6,6,n+1)\n    plt.imshow(All_images[\"pred_images\"][i])\n    plt.axis('off')\n    plt.title(class_names[pred_labels[i]])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T16:34:15.562016Z","iopub.execute_input":"2024-09-24T16:34:15.562584Z","iopub.status.idle":"2024-09-24T16:34:19.927513Z","shell.execute_reply.started":"2024-09-24T16:34:15.562515Z","shell.execute_reply":"2024-09-24T16:34:19.925536Z"},"trusted":true},"outputs":[],"execution_count":null}]}